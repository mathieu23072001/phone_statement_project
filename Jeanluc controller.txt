<?php

namespace App\Controller\Admin;

use PDO;
use connect;
use PDOException;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\RequestStack;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;


/**
 * Controller used to manage blog contents in the backend.
 *
 * 
 * 
 */

  /**
     * @Route("/admin")
     */


class accueilController extends AbstractController
{
    
  
    /**
     * @Route("/accueil",name="admin_accueil")
     */

    public function Admin(Request $request)
    {
        if ($request->isXmlHttpRequest()) {  
            // Ajax request  
            $data = $request->request->get('ville');
            $lat = $data[0];
            $lon = $data[1];
            $distance = $request->request->get('distance');
            //  dd($latitude);
            //  dd($longitude);
            //  dd($distance);
            if($lat != null && $lon != null && $distance != null){
                try{
                    // Connexion Ã  la bdd
                    $db = new PDO('mysql:host=localhost;dbname=bdtest', 'root','');
                    $db->exec('SET NAMES "UTF8"');
                } catch (PDOException $e){
                    echo 'Erreur : '. $e->getMessage();
                    die();
                }
                $sql = 'SELECT id, nom, latitude, longitude, ( 6371 * acos( cos( radians(:latitude) ) * cos( radians( latitude ) ) * cos( radians( longitude ) - radians(:longitude) ) + sin( radians(:latitude) ) * sin( radians( latitude ) ) ) ) AS distance FROM `cds` HAVING distance < :distance ORDER BY distance';
                $query = $db->prepare($sql);
      
                $query->bindValue(':latitude', $lat, PDO::PARAM_STR);    
                $query->bindValue(':longitude', $lon, PDO::PARAM_STR);
                $query->bindValue(':distance', $distance, PDO::PARAM_INT);    
                $query->execute();

                $result = $query->fetchAll();
                http_response_code(200);
                $resultat = json_encode($result);
                echo json_encode($result);
                return new JsonResponse($resultat);
            } else {  
                // Normal request  
         } 

        
    /*return $this->render('admin/accueil1.html.twig',[
        'resultat'=>$resultat
    ]);*/
    

        }

        else{

            return $this->render('admin/accueil1.html.twig');
          // return $this->redirectToRoute("admin_add_cds");
        }
       

    }








    

     
     
    
}
